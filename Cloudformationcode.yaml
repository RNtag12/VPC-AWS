AWSTemplateFormatVersion: 2010-09-09
Description: Assignment_2 540206649

Parameters:
  KeyName:
    Type: String
    Description: the keypair used to launch EC2 instances
    Default: vockey
 
Resources:

  ###########
  # VPC with Internet Gateway and VPC Gateway attachment that will link the VPC to the internet gateway
  ###########

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Rod_VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Rod_IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - VPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  ###########
  # Declaring all the public subnets and routetable
  ###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table 1

  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable1
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable1

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable1
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  
  # Public Subnet 2, its Route Table and route table association to link all of them together
 

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table 2

  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable2
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable2

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable2
      - PublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  
  # Private Subnet 1, its Route Table and route table association to link all of them together
 

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table 1

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable1
      - PrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

 
  # Private Subnet 2, its Route Table and route table association to link all of them together
 

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table 2

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable2
      - PrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ###########
  # Private Subnet 3 , its Route Table and route table association to link all of them together
  ###########

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 3

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table 3

  PrivateRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable3
      - PrivateSubnet3
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  ###########
  # Private Subnet 4 , its Route Table and route table association to link all of them together
  ###########

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select
        - 3
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 4

  PrivateRouteTable4:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table 4

  PrivateRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable4
      - PrivateSubnet4
    Properties:
      RouteTableId: !Ref PrivateRouteTable4
      SubnetId: !Ref PrivateSubnet4

  ###########
  # NAT Gateway to allow  me to connect to the internet from public subnet 1
  ###########

  NATGateway:
    DependsOn: PrivateSubnet1
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NATGatewayEIP.AllocationId

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      
 ###########
  # NAT Gateway to allow  me to connect to the internet from public subnet 2
  ###########

  NATGateway2:
    DependsOn: PrivateSubnet2
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt NATGatewayEIP2.AllocationId

  NATGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2


  ###########
  # EC2 instance for cafe web app that uses RDS.
  ###########

  CafeInstance:
    Type: AWS::EC2::Instance
    
    Properties:
      ImageId: ami-0bb84b8ffd87024d8
      
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !Ref PrivateSubnet1
          GroupSet:
            - !Ref CafeSG
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: CafeWebAppServer
      KeyName: vockey
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          yum -y update
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          dnf install -y httpd php php-mysqli mariadb105
          systemctl enable httpd
          systemctl start httpd
          
    
  ###########
  # Security group for Cafe web app instance
  ###########

  CafeSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Enable SSH, HTTP access
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CafeSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
          
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
            
  ###########
  # EC2 instance for API app that uses RDS.
  ###########
  APIInstance:
    Type: AWS::EC2::Instance
    
    
    Properties:
      ImageId: ami-0bb84b8ffd87024d8
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !Ref PrivateSubnet1
          GroupSet:
            - !Ref APISG
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: APIendpoint
      KeyName: vockey
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          yum -y update
          yum install -y python3
          pip3 install flask
          

 ###########
  # Security group for API endpoint  instance
  ###########

  APISG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH, HTTP access
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: APISG
      SecurityGroupIngress:          
        - IpProtocol: tcp
          FromPort: '5000'
          ToPort: '5000'
          CidrIp: 0.0.0.0/0 
          
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
          
      SecurityGroupEgress: # Allows all outbound traffic
        - IpProtocol: -1  
          FromPort: -1    
          ToPort: -1      
          CidrIp: 0.0.0.0/0  
  



  ############
  # RDS DB instance, security group, and subnet group
  ############

  CafeDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: Mysql
      MasterUsername: admin
      MasterUserPassword: admin1234
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      AllocatedStorage: 10
      MultiAZ: true
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      MonitoringInterval: 0
      Tags:
        - Key: Name
          Value: CafeDatabase

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB-SG
      GroupName: DB-SG
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref CafeSG
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
      VpcId: !Ref VPC

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Rod-DB-Subnet-Group
      DBSubnetGroupName: Rod-DB-Subnet-Group
      SubnetIds:
        - !Ref PrivateSubnet3
        - !Ref PrivateSubnet4
      Tags:
        - Key: Name
          Value: DBSubnetGroup

 